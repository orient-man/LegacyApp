diff --git a/LegacyApp.Web/Services/TripService.cs b/LegacyApp.Web/Services/TripService.cs
index a92ccf8..e6eda0b 100644
--- a/LegacyApp.Web/Services/TripService.cs
+++ b/LegacyApp.Web/Services/TripService.cs
@@ -8,27 +8,12 @@ namespace LegacyApp.Web.Services
     {
         public List<Trip> GetTripsByUser(User user)
         {
-            List<Trip> tripList = new List<Trip>();
-
-            var loggedInUser = GetLoggedInUser();
-            if (loggedInUser != null)
-            {
-                if (user.IsFriendWith(loggedInUser))
-                {
-                    tripList = TripsByUser(user);
-                }
-            }
-            else
-            {
+            if (GetLoggedInUser() == null)
                 throw new UserNotLoggedInException();
-            }
 
-            return tripList;
-        }
-
-        protected virtual List<Trip> TripsByUser(User user)
-        {
-            return TripDao.FindTripsByUser(user);
+            return user.IsFriendWith(GetLoggedInUser())
+                ? TripsByUser(user)
+                : NotTrips();
         }
 
         protected virtual User GetLoggedInUser()
@@ -41,5 +26,15 @@ namespace LegacyApp.Web.Services
             }
             return loggedUser;
         }
+
+        protected virtual List<Trip> TripsByUser(User user)
+        {
+            return TripDao.FindTripsByUser(user);
+        }
+
+        private List<Trip> NotTrips()
+        {
+            return new List<Trip>();
+        }
     }
 }
\ No newline at end of file
diff --git a/ReadMe.md b/ReadMe.md
index 93f3c41..f631b96 100644
--- a/ReadMe.md
+++ b/ReadMe.md
@@ -60,8 +60,11 @@ Start testing from shortest do deepest branch
  * method does too much (feature envy)
  * Single Responsibility Principle!
  * Tip for Mac keyboard: Alt+Insert == fn + alt/option + return
- * ShouldInformWhenUsersAreNotFriends
+ * ShouldInformWhenUsersAre(Not)Friends
  * Resharper: Ctrl+Alt+F -> file structure
  * stay green all the time!
  * bring variables together (near usage)
+ * guard clause to the top
+ * get rid of variables (if you can) -> they make for complexity
+ * code should be read top-down
 
